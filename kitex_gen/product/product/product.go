// Code generated by Kitex v0.7.2. DO NOT EDIT.

package product

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	product "seckill/kitex_gen/product"
)

func serviceInfo() *kitex.ServiceInfo {
	return productServiceInfo
}

var productServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Product"
	handlerType := (*product.Product)(nil)
	methods := map[string]kitex.MethodInfo{
		"AddProduct":  kitex.NewMethodInfo(addProductHandler, newProductAddProductArgs, newProductAddProductResult, false),
		"ListProduct": kitex.NewMethodInfo(listProductHandler, newProductListProductArgs, newProductListProductResult, false),
		"ProductInfo": kitex.NewMethodInfo(productInfoHandler, newProductProductInfoArgs, newProductProductInfoResult, false),
		"Try":         kitex.NewMethodInfo(tryHandler, newProductTryArgs, newProductTryResult, false),
		"Commit":      kitex.NewMethodInfo(commitHandler, newProductCommitArgs, newProductCommitResult, false),
		"Cancel":      kitex.NewMethodInfo(cancelHandler, newProductCancelArgs, newProductCancelResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "product",
		"ServiceFilePath": `idl/product.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func addProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductAddProductArgs)
	realResult := result.(*product.ProductAddProductResult)
	success, err := handler.(product.Product).AddProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductAddProductArgs() interface{} {
	return product.NewProductAddProductArgs()
}

func newProductAddProductResult() interface{} {
	return product.NewProductAddProductResult()
}

func listProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductListProductArgs)
	realResult := result.(*product.ProductListProductResult)
	success, err := handler.(product.Product).ListProduct(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductListProductArgs() interface{} {
	return product.NewProductListProductArgs()
}

func newProductListProductResult() interface{} {
	return product.NewProductListProductResult()
}

func productInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductProductInfoArgs)
	realResult := result.(*product.ProductProductInfoResult)
	success, err := handler.(product.Product).ProductInfo(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductProductInfoArgs() interface{} {
	return product.NewProductProductInfoArgs()
}

func newProductProductInfoResult() interface{} {
	return product.NewProductProductInfoResult()
}

func tryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductTryArgs)
	realResult := result.(*product.ProductTryResult)
	success, err := handler.(product.Product).Try(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductTryArgs() interface{} {
	return product.NewProductTryArgs()
}

func newProductTryResult() interface{} {
	return product.NewProductTryResult()
}

func commitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductCommitArgs)
	realResult := result.(*product.ProductCommitResult)
	success, err := handler.(product.Product).Commit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductCommitArgs() interface{} {
	return product.NewProductCommitArgs()
}

func newProductCommitResult() interface{} {
	return product.NewProductCommitResult()
}

func cancelHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*product.ProductCancelArgs)
	realResult := result.(*product.ProductCancelResult)
	success, err := handler.(product.Product).Cancel(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newProductCancelArgs() interface{} {
	return product.NewProductCancelArgs()
}

func newProductCancelResult() interface{} {
	return product.NewProductCancelResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) AddProduct(ctx context.Context, req *product.ProductInfo) (r *product.BaseResponse, err error) {
	var _args product.ProductAddProductArgs
	_args.Req = req
	var _result product.ProductAddProductResult
	if err = p.c.Call(ctx, "AddProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListProduct(ctx context.Context, req *product.ListRequest) (r *product.ListResponse, err error) {
	var _args product.ProductListProductArgs
	_args.Req = req
	var _result product.ProductListProductResult
	if err = p.c.Call(ctx, "ListProduct", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ProductInfo(ctx context.Context, req *product.IdRequest) (r *product.ProductResponse, err error) {
	var _args product.ProductProductInfoArgs
	_args.Req = req
	var _result product.ProductProductInfoResult
	if err = p.c.Call(ctx, "ProductInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Try(ctx context.Context, req *product.BuyRequest) (r *product.BaseResponse, err error) {
	var _args product.ProductTryArgs
	_args.Req = req
	var _result product.ProductTryResult
	if err = p.c.Call(ctx, "Try", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Commit(ctx context.Context, req *product.BuyRequest) (r *product.BaseResponse, err error) {
	var _args product.ProductCommitArgs
	_args.Req = req
	var _result product.ProductCommitResult
	if err = p.c.Call(ctx, "Commit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Cancel(ctx context.Context, req *product.BuyRequest) (r *product.BaseResponse, err error) {
	var _args product.ProductCancelArgs
	_args.Req = req
	var _result product.ProductCancelResult
	if err = p.c.Call(ctx, "Cancel", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
