// Code generated by Kitex v0.7.2. DO NOT EDIT.

package user

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	user "seckill/kitex_gen/user"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceInfo
}

var userServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "User"
	handlerType := (*user.User)(nil)
	methods := map[string]kitex.MethodInfo{
		"Registry": kitex.NewMethodInfo(registryHandler, newUserRegistryArgs, newUserRegistryResult, false),
		"Login":    kitex.NewMethodInfo(loginHandler, newUserLoginArgs, newUserLoginResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "user",
		"ServiceFilePath": `idl/user.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func registryHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserRegistryArgs)
	realResult := result.(*user.UserRegistryResult)
	success, err := handler.(user.User).Registry(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserRegistryArgs() interface{} {
	return user.NewUserRegistryArgs()
}

func newUserRegistryResult() interface{} {
	return user.NewUserRegistryResult()
}

func loginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserLoginArgs)
	realResult := result.(*user.UserLoginResult)
	success, err := handler.(user.User).Login(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserLoginArgs() interface{} {
	return user.NewUserLoginArgs()
}

func newUserLoginResult() interface{} {
	return user.NewUserLoginResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Registry(ctx context.Context, req *user.BaseRequest) (r *user.BaseResponse, err error) {
	var _args user.UserRegistryArgs
	_args.Req = req
	var _result user.UserRegistryResult
	if err = p.c.Call(ctx, "Registry", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Login(ctx context.Context, req *user.BaseRequest) (r *user.LoginResponse, err error) {
	var _args user.UserLoginArgs
	_args.Req = req
	var _result user.UserLoginResult
	if err = p.c.Call(ctx, "Login", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
