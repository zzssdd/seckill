// Code generated by Kitex v0.7.2. DO NOT EDIT.

package seckill

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	seckill "seckill/kitex_gen/seckill"
)

func serviceInfo() *kitex.ServiceInfo {
	return seckillServiceInfo
}

var seckillServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "Seckill"
	handlerType := (*seckill.Seckill)(nil)
	methods := map[string]kitex.MethodInfo{
		"DoSeckill": kitex.NewMethodInfo(doSeckillHandler, newSeckillDoSeckillArgs, newSeckillDoSeckillResult, false),
		"Submit":    kitex.NewMethodInfo(submitHandler, newSeckillSubmitArgs, newSeckillSubmitResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "seckill",
		"ServiceFilePath": `idl/seckill.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.7.2",
		Extra:           extra,
	}
	return svcInfo
}

func doSeckillHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seckill.SeckillDoSeckillArgs)
	realResult := result.(*seckill.SeckillDoSeckillResult)
	success, err := handler.(seckill.Seckill).DoSeckill(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSeckillDoSeckillArgs() interface{} {
	return seckill.NewSeckillDoSeckillArgs()
}

func newSeckillDoSeckillResult() interface{} {
	return seckill.NewSeckillDoSeckillResult()
}

func submitHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*seckill.SeckillSubmitArgs)
	realResult := result.(*seckill.SeckillSubmitResult)
	success, err := handler.(seckill.Seckill).Submit(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newSeckillSubmitArgs() interface{} {
	return seckill.NewSeckillSubmitArgs()
}

func newSeckillSubmitResult() interface{} {
	return seckill.NewSeckillSubmitResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) DoSeckill(ctx context.Context, req *seckill.SeckillRequest) (r *seckill.SeckillResponse, err error) {
	var _args seckill.SeckillDoSeckillArgs
	_args.Req = req
	var _result seckill.SeckillDoSeckillResult
	if err = p.c.Call(ctx, "DoSeckill", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Submit(ctx context.Context, req *seckill.SubmitRequest) (r *seckill.BaseResponse, err error) {
	var _args seckill.SeckillSubmitArgs
	_args.Req = req
	var _result seckill.SeckillSubmitResult
	if err = p.c.Call(ctx, "Submit", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
